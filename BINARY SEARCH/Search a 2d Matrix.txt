Intuition
The word sorted tells us to use the concept of binary search we can treat every row as 1d array and use binary search It will have time complexity as O(mlogn) where n is no of columns and m is no of rows

Approach
But we can do better from the approch mentioned in Intuition above.
We can treat whole 2d array as 1d array and use the binary search but we have to modify it.
The mid value we calculate tells us the index from the starting point for eg if mid is 5 then it means the 6th number from starting but now we have to identify its position .
So as we know here we are wrapping the columns so we can use modulo operator to find the column element is present is using mid%columns
And for row we know that the row no in which the element is present depends on the no of items per row.
Less items in the row then farther will be our column
OKKK THIS WAS A LOT
HERE IS THE EXPLAINATION USING EXAMPLE
0 1 2 3
4 5 6 7
8 9 10 11
low=0 high=11 and mid will be 5 (integer division)
the 6th element is 5 which is present is 1st row,1st column(0indexing)
and we can calculate this 5/4,5%4=1,1
HOPE YOU HAVE UNDERSTOOD

Complexity
Time complexity:
O(logmn)
Code
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int rows=matrix.length;
        int columns=matrix[0].length;
        int low=0;
        int high=rows*columns-1;
        while(low<=high){
            int mid=low+(high-low)/2;
            if(matrix[mid/columns][mid%columns]==target){
                return true;
            }
            else if(matrix[mid/columns][mid%columns]>target){
                high=mid-1;
            }
            else{
                low=mid+1;
            }
        }
        return false;
    }
}
